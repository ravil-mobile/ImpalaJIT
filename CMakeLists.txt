# Copyright 2017 Manuel Fasching <manuel.fasching@tum.de>
# Distributed under the MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
# PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
# FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


cmake_minimum_required(VERSION 2.6)

option( SHARED_LIB "Compile the shared library" OFF )
option( STATIC_LIB "Compile the static library" ON )
option( TESTS "Enable Tests" OFF )

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -O3")

project(ImpalaJIT)

set(include_dirs
        include
        include/impalajit
        compiler/include
        compiler/include/nodes
        compiler/include/types
        compiler/frontend/include
        compiler/semantic_analysis/include
        compiler/code-gen/include
        compiler/code-gen/assembly/include
        compiler/engine)

include_directories(${include_dirs})


set(source_files ${source_files}
        compiler/frontend/parser.cc
        compiler/frontend/scanner.cc
        compiler/driver.cc
        compiler/function_context.cc
        compiler/include/nodes/node.h
        impalajit.cc
        compiler/include/nodes/expression_nodes.h
        compiler/include/nodes/compare_nodes.h
        compiler/include/nodes/conditional_nodes.h
        compiler/include/nodes/boolean_nodes.h
        compiler/include/nodes/assignment_nodes.h
        compiler/semantic_analysis/semantic_analyzer.cc
        compiler/code-gen/include/ptr_map_container.hh
        compiler/code-gen/include/calculation_helper.hh
        compiler/code-gen/code_generator.cc
        compiler/code-gen/assembly/assembly__sse_4_1.cc
        compiler/engine/engine.cpp)

##### pkg-config #####
find_package( PkgConfig )
if( PKG_CONFIG_FOUND )
    # Detect private libs and directories

    set( _PKG_CONFIG_PROJECT_NAME ${PROJECT_NAME} )
    set( _PKG_CONFIG_DESCRIPTION "JIT Compilation to realize flexible data access" )
    set( _PKG_CONFIG_URL "https://github.com/Manuel1605/ImpalaJIT" )
    set( _PKG_CONFIG_VERSION "0.9" )

    set( _PKG_CONFIG_PREFIX ${CMAKE_INSTALL_PREFIX} )
    set( _PKG_CONFIG_LIBDIR "\${prefix}/lib" )
    set( _PKG_CONFIG_INCLUDEDIR "\${prefix}/include" )

    set( _PKG_CONFIG_LIBS "${CMAKE_LIBRARY_PATH_FLAG}\${libdir} ${CMAKE_LINK_LIBRARY_FLAG}impalajit" )

    set( _PKG_CONFIG_LIBS_PRIVATE  "${_PKG_CONFIG_LIBDIRS_PRIVATE} ${_PKG_CONFIG_LIBS_PRIVATE}" )
    set( _PKG_CONFIG_CFLAGS "-I\${includedir}" )

    # Where to install the pkg-config file?
    set( _PKG_CONFIG_DIR ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig )

    # Configure the pkgconfig file
    configure_file( CMake/pkg-config.pc.in impalajit.pc )

    # Install the pkg file
    install( FILES ${CMAKE_CURRENT_BINARY_DIR}/impalajit.pc	DESTINATION lib/pkgconfig )
endif( PKG_CONFIG_FOUND )

find_package(LLVM 10.0 REQUIRED CONFIG)
LLVM_MAP_COMPONENTS_TO_LIBNAMES(LLVM_LIBS core orcjit native)
message(STATUS "LLVM: ${LLVM_VERSION}")


if( SHARED_LIB )
    set(TARGET_NAME impalajit)
    add_library( ${TARGET_NAME} SHARED ${source_files} )
endif( SHARED_LIB )

if( STATIC_LIB )
    set(TARGET_NAME impalajit-static)
    add_library( ${TARGET_NAME} STATIC ${source_files} )
    set_target_properties( ${TARGET_NAME} PROPERTIES OUTPUT_NAME impalajit )
endif( STATIC_LIB )

target_link_libraries( ${TARGET_NAME} PUBLIC ${math_library} ${LLVM_LIBS} )
target_include_directories( ${TARGET_NAME} PRIVATE ${LLVM_INCLUDE_DIRS} )
target_compile_definitions( ${TARGET_NAME} PRIVATE ${LLVM_DEFINITIONS} )

# Tests
if( TESTS )
    enable_testing()
    add_subdirectory( tests )
endif( TESTS )

# install target
install( TARGETS ${TARGET_NAME} DESTINATION lib )
install( FILES include/impalajit.hh
         DESTINATION include )
install( FILES include/impalajit.f90
        DESTINATION include )
install( FILES include/impalajit/types.hh
         DESTINATION include/impalajit )



# uninstall target
configure_file(
        "${CMAKE_CURRENT_SOURCE_DIR}/cmake_uninstall.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
        IMMEDIATE @ONLY)
add_custom_target(uninstall
        COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)


# code generation target
add_custom_target(generate
        COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_SOURCE_DIR}/generate.cmake
        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR})


